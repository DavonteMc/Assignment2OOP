@page "/reservations"
@using Assignment2OOP.Data

<section id="findReservations">
    <h3>Reservation Finder</h3>
    <form>
        <div>
            <label for="resCode">Code:</label>
            <select @onchange="SelectCode">
                <option disabled>Code</option>
                <option selected>Any</option>                
                @foreach (Reservation res in reservations)
                {
                    <option value="@res.Code">@res.Code</option>
                }
            </select>
        </div>
        <div>
            <label for="resAirline">Airline:</label>
            <select @onchange="SelectAirline">
                <option disabled>Airline</option>
                <option selected>Any</option>                
                @foreach (Reservation res in reservations)
                {
                    <option value="@res.ResFlight.Airline">@res.ResFlight.Airline</option>
                }
            </select>
        </div>
        <div>
            <label for="resClientName">Name:</label>
            <select @onchange="SelectName">
                <option disabled>Name</option>
                <option selected>Any</option>                
                @foreach (Reservation res in reservations)
                {
                    <option value="@res.Name">@res.Name</option>
                }
            </select>
        </div>
    </form>
    <button type="submit" class="btn btn-primary" @onclick="FindReservations">Find Reservations</button>
</section>

<section id="displayReservations">
    <h3>Reservations</h3>
    <div>
        <select @onchange="SelectReservation">
            <option disabled selected>Loading...</option>
            @if (displayReservations.Count == 0)
            {
                <option disabled>Loading...</option>
            }
            else
            {
                @foreach (Reservation res in displayReservations)
                {
                    <option value="@res.Code">@res.Code @res.ResFlight.Code @res.ResFlight.Airline @res.ResFlight.Cost @res.Name @res.Citizenship @res.Status</option>
                }
            }
        </select>
    </div>
</section>
<section id="findFlightSection">
    <h3>Reserve</h3>>
    <form>
        <div>
            <label for="reservationCode">Reservation Code</label>
            <input type="text" id="reservationCode" class="form-control" placeholder="@resCode" @bind="@resCode" disabled />
        </div>
        <div>
            <label for="resFlightCode">Flight Code</label>
            <input type="text" id="resFlightCode" class="form-control" placeholder="@flightCode" @bind="@flightCode" disabled />
        </div>
        <div>
            <label for="resFlightAirline">Airline</label>
            <input type="text" id="resFlightAirline" class="form-control" placeholder="@flightAirline" @bind="@flightAirline" disabled />
        </div>
        <div>
            <label for="resFlightCost">Cost</label>
            <input type="text" id="resFlightCost" class="form-control" placeholder="@flightCost" @bind="@flightCost" disabled />
        </div>
        <div>
            <label for="resClientName">Name</label>
            <input type="number" class="form-control" placeholder="Name" @bind="@clientName"  />
        </div>
        <div>
            <label for="resClientCitizenship">Citizenship</label>
            <input type="text" class="form-control" placeholder="Citizenship" @bind="@clientCitizenship" />
        </div>
        <div>
            <label for="resStatus">Status</label>
            <select id="resStatus" @bind="@status">
                <option disabled>Any</option>
                <option value="active" selected>Active</option>
                <option value="inactive">Inactive</option>
            </select>
        </div>
    </form>
    <button type="submit" class="btn btn-primary" @onclick="SaveReservation">Save</button>
</section>


@code {
    FlightManager flightManager = new FlightManager();
    List<Flight> flights = FlightManager.GetFlights(); //actual list

    List<Reservation> displayReservations = new List<Reservation>(); // display list

    ReservationManager reservationManager = new ReservationManager();
    List<Reservation> reservations = ReservationManager.GetReservations();

    string selectedCode = "";
    string selectedAirline = "";
    string selectedName = "";

    string selectedReservationCode = "";
    Reservation selectedReservation;

    string resCode = "Reservation";
    string flightCode = "Flight";
    string flightAirline = "Airline";
    double flightCost = 0;
    string clientName;
    string clientCitizenship;
    string status;


    string reservationCode;

    void SelectCode(ChangeEventArgs e)
    {
        selectedCode = e.Value.ToString();
    }

    void SelectAirline(ChangeEventArgs e)
    {
        selectedAirline = e.Value.ToString();
    }
    void SelectName(ChangeEventArgs e)
    {
        selectedName = e.Value.ToString();
    }

    void FindReservations()
    {
        displayReservations.Clear();
        if ((selectedCode == "Any") && (selectedAirline == "Any") && (selectedName == "Any"))  // All Choices Selected
        {
            displayReservations = reservations.Where(r => r.Code.ToUpper().Contains(selectedCode.ToUpper()) && r.ResFlight.Airline.ToUpper().Contains(selectedAirline.ToUpper()) && r.Name.ToUpper().Contains(selectedName.ToUpper())).ToList();
        }
        else if ((selectedCode != "Any") && (selectedAirline != "Any") && (selectedName != "Any")) // All Chosen
        {
            displayReservations = reservations.Where(r => r.Code.ToUpper().Contains(selectedCode.ToUpper()) && r.ResFlight.Airline.ToUpper().Contains(selectedAirline.ToUpper()) && r.Name.ToUpper().Contains(selectedName.ToUpper())).ToList();
        }
        else if ((selectedCode != "Any") && (selectedName != "Any")) // Code and Name
        {
            displayReservations = reservations.Where(r => r.Code.ToUpper().Contains(selectedCode.ToUpper()) && r.Name.ToUpper().Contains(selectedName.ToUpper())).ToList();
        }
        else if ((selectedAirline != "Any") && (selectedName != "Any")) // Airline and Name
        {
            displayReservations = reservations.Where(r => r.ResFlight.Airline.ToUpper().Contains(selectedAirline.ToUpper()) && r.Name.ToUpper().Contains(selectedName.ToUpper())).ToList();
        }
        else if ((selectedCode != "Any") && (selectedAirline != "Any")) //Code and Airline
        {
            displayReservations = reservations.Where(r => r.Code.ToUpper().Contains(selectedCode.ToUpper()) || r.ResFlight.Airline.ToUpper().Contains(selectedAirline.ToUpper())).ToList();
        }
        else if (selectedCode != "Any") // Code
        {
            displayReservations = reservations.Where(r => r.Code.ToUpper().Contains(selectedCode.ToUpper())).ToList();
        }
        else if (selectedAirline != "Any") // Airline
        {
            displayReservations = reservations.Where(r => r.ResFlight.Airline.ToUpper().Contains(selectedAirline.ToUpper())).ToList();
        }
        else if (selectedName != "Any") // Name
        {
            displayReservations = reservations.Where(r => r.Name.ToUpper().Contains(selectedName.ToUpper())).ToList();
        }

        // ChangeEventArgs won't register a clicked item if it's the only option so this is added to overcome that
        if (displayReservations.Count() == 1)
        {

            Reservation selectedReservation = reservations[0];//.Where(r => r.Code.ToUpper().Contains(flightCode)).FirstOrDefault();
            resCode = selectedReservation.Code;
            flightCode = selectedReservation.ResFlight.Code;
            flightAirline = selectedReservation.ResFlight.Airline;
            flightCost = selectedReservation.ResFlight.Cost;
            clientName = selectedReservation.Name;
            clientCitizenship = selectedReservation.Citizenship;
            status = selectedReservation.Status;
        }
    }

    void SelectReservation(ChangeEventArgs e)
    {
        selectedReservationCode = e.Value.ToString();
        if (selectedReservationCode != null)
        {
            Reservation selectedReservation = reservations.Where(r => r.Code.ToUpper().Contains(selectedReservationCode)).FirstOrDefault();
            resCode = selectedReservation.Code;
            flightCode = selectedReservation.ResFlight.Code;
            flightAirline = selectedReservation.ResFlight.Airline;
            flightCost = selectedReservation.ResFlight.Cost;
            clientName = selectedReservation.Name;
            clientCitizenship = selectedReservation.Citizenship;
            status = selectedReservation.Status;
        }
    }

    void SaveReservation()
    {
        if (resCode != "Reservation")
        {
            Reservation savedReservation = reservations.Where(r => r.Code.ToUpper().Contains(resCode)).FirstOrDefault();
            savedReservation.Name = clientName;
            savedReservation.Citizenship = clientCitizenship;
            savedReservation.Status = status;
            ReservationManager.Persist();
        }
    }


    
}
